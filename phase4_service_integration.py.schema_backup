"""
Phase 4: Service Integration with Real APIs
Updates handlers to use real API integrations instead of mock services
"""

import logging
from typing import Dict, List, Optional, Tuple
from config import Config
from database_manager import DatabaseManager
from api_integrator import APIIntegrator

logger = logging.getLogger(__name__)


class Phase4ServiceIntegration:
    def __init__(self, config: Config, db_manager: DatabaseManager):
        self.config = config
        self.db_manager = db_manager
        self.api_integrator = APIIntegrator(config)

    # Enhanced Domain Registration with Real API
    def register_domain_with_real_api(
        self, telegram_id: int, domain_name: str, tld: str
    ) -> Tuple[bool, str]:
        """Register domain using real OpenProvider API"""
        try:
            # Get user information for domain registration
            user = self.db_manager.get_user(telegram_id)
            if not user:
                return False, "User not found"

            # Prepare customer data for OpenProvider
            customer_data = {
                "first_name": "Customer",
                "last_name": f"User{telegram_id}",
                "email": user.email or f"user{telegram_id}@nomadly.com",
                "street": "123 Privacy St",
                "city": "Anonymous City",
                "zipcode": "12345",
                "country": "US",
                "phone": "1234567890",
                "company_name": "Individual",
            }

            # Check availability first
            available, price = self.api_integrator.check_domain_availability(
                domain_name, tld
            )
            if not available:
                return False, f"Domain {domain_name}.{tld} is not available"

            # Register the domain
            success, domain_id, message = self.api_integrator.register_domain(
                domain_name, tld, customer_data
            )

            if success and domain_id:
                # Store domain in database with OpenProvider ID
                domain_record = self.db_manager.add_registered_domain(
                    telegram_id=telegram_id,
                    domain_name=f"{domain_name}.{tld}",
                    price_usd=price,
                    openprovider_domain_id=domain_id,
                )

                if domain_record:
                    # Create Cloudflare DNS zone
                    zone_success, cloudflare_zone_id, nameservers = (
                        self.api_integrator.create_dns_zone(f"{domain_name}.{tld}")
                    )

                    if zone_success and cloudflare_zone_id:
                        # Update domain record with Cloudflare zone ID
                        domain_record.cloudflare_zone_id = cloudflare_zone_id
                        self.db_manager.session.commit()

                        logger.info(
                            f"Domain registered with DNS zone: {domain_name}.{tld} (Domain ID: {domain_id}, Zone ID: {cloudflare_zone_id})"
                        )
                        return (
                            True,
                            f"Domain {domain_name}.{tld} registered successfully with DNS management",
                        )
                    else:
                        logger.info(
                            f"Domain registered but DNS zone creation failed: {domain_name}.{tld}"
                        )
                        return (
                            True,
                            f"Domain {domain_name}.{tld} registered successfully (DNS setup pending)",
                        )
                else:
                    return False, "Failed to save domain to database"
            else:
                return False, message

        except Exception as e:
            logger.error(f"Domain registration error: {e}")
            return False, f"Registration failed: {str(e)}"

    # Enhanced URL Shortening with Real API
    def create_short_url_with_real_api(
        self,
        telegram_id: int,
        long_url: str,
        custom_domain: str = "aws3.link",
        custom_slug: str = None,
    ) -> Tuple[bool, Optional[str], str]:
        """Create short URL using real AWS3 API"""
        try:
            # Check if user has subscription or pay-per-link balance
            user = self.db_manager.get_user(telegram_id)
            if not user:
                return False, None, "User not found"

            # Create short URL via API
            success, short_url, short_code = self.api_integrator.shorten_url(
                long_url, custom_domain, custom_slug
            )

            if success and short_url and short_code:
                # Store in database
                url_record = self.db_manager.add_shortened_url(
                    telegram_id=telegram_id,
                    long_url=long_url,
                    short_url=short_url,
                    short_code=short_code,
                    domain=custom_domain,
                    custom_slug=custom_slug,
                )

                if url_record:
                    logger.info(
                        f"URL shortened successfully: {long_url} -> {short_url}"
                    )
                    return True, short_url, "URL shortened successfully"
                else:
                    return False, None, "Failed to save URL to database"
            else:
                return False, None, "Failed to create short URL"

        except Exception as e:
            logger.error(f"URL shortening error: {e}")
            return False, None, f"Shortening failed: {str(e)}"

    # Enhanced Cryptocurrency Payment with Real API
    def create_crypto_payment_with_real_api(
        self, order_id: str, amount: float, cryptocurrency: str
    ) -> Tuple[bool, Optional[str], Optional[str], str]:
        """Create cryptocurrency payment using real BlockBee API"""
        try:
            # Generate callback URL for webhook
            callback_url = (
                f"{self.config.WEBHOOK_URL}/payment/webhook"
                if self.config.WEBHOOK_URL
                else "http://localhost:8000/payment/webhook"
            )

            # Create payment address
            success, payment_address, qr_code = (
                self.api_integrator.create_crypto_payment(
                    cryptocurrency, amount, order_id, callback_url
                )
            )

            if success and payment_address:
                logger.info(
                    f"Crypto payment created: {cryptocurrency.upper()} address {payment_address} for ${amount}"
                )
                return (
                    True,
                    payment_address,
                    qr_code,
                    "Payment address created successfully",
                )
            else:
                return False, None, None, "Failed to create payment address"

        except Exception as e:
            logger.error(f"Crypto payment creation error: {e}")
            return False, None, None, f"Payment creation failed: {str(e)}"

    # Enhanced Hosting Account Creation with Real API
    def create_hosting_account_with_real_api(
        self, telegram_id: int, domain: str, plan: str
    ) -> Tuple[bool, Optional[str], Optional[str], str]:
        """Create hosting account using real cPanel API"""
        try:
            # Generate unique username and password
            import uuid
            import secrets
            import string

            username = f"nomad{telegram_id}_{secrets.token_hex(4)}"[
                :14
            ]  # cPanel username limit
            password = "".join(
                secrets.choice(string.ascii_letters + string.digits + "!@#$%^&*")
                for _ in range(12)
            )

            # Get user email
            user = self.db_manager.get_user(telegram_id)
            email = (
                user.email if user and user.email else f"user{telegram_id}@nomadly.com"
            )

            # Create hosting account
            success, account_username, message = (
                self.api_integrator.create_hosting_account(
                    domain, username, password, email, plan
                )
            )

            if success and account_username:
                # Store hosting account info in database
                hosting_record = self.db_manager.add_hosting_account(
                    telegram_id=telegram_id,
                    domain=domain,
                    username=account_username,
                    password=password,
                    plan=plan,
                    email=email,
                )

                if hosting_record:
                    logger.info(
                        f"Hosting account created: {account_username} for domain {domain}"
                    )
                    return (
                        True,
                        account_username,
                        password,
                        "Hosting account created successfully",
                    )
                else:
                    return (
                        False,
                        None,
                        None,
                        "Failed to save hosting account to database",
                    )
            else:
                return False, None, None, message

        except Exception as e:
            logger.error(f"Hosting account creation error: {e}")
            return False, None, None, f"Account creation failed: {str(e)}"

    # Enhanced DNS Management with Real API
    def setup_dns_with_real_api(
        self, domain_name: str, record_type: str, name: str, content: str
    ) -> Tuple[bool, str]:
        """Setup DNS records using real Cloudflare API"""
        try:
            # Get domain record from database
            domain_record = self.db_manager.get_domain_by_name(domain_name)
            if not domain_record or not domain_record.cloudflare_zone_id:
                return False, "Domain not found or DNS zone not configured"

            # Create DNS record
            success, record_id = self.api_integrator.create_dns_record(
                domain_record.cloudflare_zone_id, record_type, name, content
            )

            if success and record_id:
                logger.info(f"DNS record created: {record_type} {name} -> {content}")
                return True, "DNS record created successfully"
            else:
                return False, "Failed to create DNS record"

        except Exception as e:
            logger.error(f"DNS setup error: {e}")
            return False, f"DNS setup failed: {str(e)}"

    # Service Delivery Automation
    def deliver_service_automatically(self, order_id: str) -> bool:
        """Automatically deliver service after payment confirmation"""
        try:
            # Get order from database
            order = self.db_manager.get_order_by_id(order_id)
            if not order:
                logger.error(f"Order not found: {order_id}")
                return False

            service_type = order.service_type.lower()

            if service_type == "domain":
                # Domain registration
                domain_details = order.service_details
                domain_name = domain_details.get("domain_name", "")
                tld = domain_details.get("tld", "com")

                if domain_name and tld:
                    success, message = self.register_domain_with_real_api(
                        order.telegram_id, domain_name, tld
                    )

                    if success:
                        order.status = "completed"
                        order.delivery_status = "delivered"
                        self.db_manager.session.commit()
                        logger.info(f"Domain service delivered: {order_id}")
                        return True
                    else:
                        logger.error(f"Domain delivery failed: {message}")
                        return False

            elif service_type == "hosting":
                # Hosting account creation
                hosting_details = order.service_details
                domain = hosting_details.get("domain", "")
                plan = hosting_details.get("plan", "basic")

                if domain:
                    success, username, password, message = (
                        self.create_hosting_account_with_real_api(
                            order.telegram_id, domain, plan
                        )
                    )

                    if success:
                        # Update order with delivery info
                        order.status = "completed"
                        order.delivery_status = "delivered"
                        order.delivery_details = {
                            "username": username,
                            "password": password,
                            "login_url": f"https://{self.config.CPANEL_WHM_HOST}:2083",
                        }
                        self.db_manager.session.commit()
                        logger.info(f"Hosting service delivered: {order_id}")
                        return True
                    else:
                        logger.error(f"Hosting delivery failed: {message}")
                        return False

            elif "url" in service_type or "shortener" in service_type:
                # URL shortener service
                url_details = order.service_details
                long_url = url_details.get("long_url", "")
                domain = url_details.get("domain", "aws3.link")
                custom_slug = url_details.get("custom_slug")

                if long_url:
                    success, short_url, message = self.create_short_url_with_real_api(
                        order.telegram_id, long_url, domain, custom_slug
                    )

                    if success:
                        order.status = "completed"
                        order.delivery_status = "delivered"
                        order.delivery_details = {"short_url": short_url}
                        self.db_manager.session.commit()
                        logger.info(f"URL shortener service delivered: {order_id}")
                        return True
                    else:
                        logger.error(f"URL shortener delivery failed: {message}")
                        return False

            logger.warning(f"Unknown service type for delivery: {service_type}")
            return False

        except Exception as e:
            logger.error(f"Service delivery error: {e}")
            return False

    # Integration Status Check
    def check_integration_status(self) -> Dict[str, Dict]:
        """Check status of all API integrations"""
        return self.api_integrator.test_apis()

    # Migration from Mock to Real Services
    def migrate_to_real_services(self) -> Dict[str, bool]:
        """Migrate existing mock services to real API implementations"""
        migration_results = {
            "domain_registration": False,
            "url_shortener": False,
            "payment_processing": False,
            "hosting_management": False,
            "dns_management": False,
        }

        try:
            # Check which APIs are available
            api_status = self.api_integrator.get_api_status()

            # Domain registration migration
            if api_status.get("openprovider", False):
                migration_results["domain_registration"] = True
                logger.info("✅ Domain registration migrated to OpenProvider API")

            # URL shortener migration
            if api_status.get("aws3", False):
                migration_results["url_shortener"] = True
                logger.info("✅ URL shortener migrated to AWS3 API")

            # Payment processing migration
            if api_status.get("blockbee", False):
                migration_results["payment_processing"] = True
                logger.info("✅ Payment processing migrated to BlockBee API")

            # Hosting management migration
            if api_status.get("cpanel", False):
                migration_results["hosting_management"] = True
                logger.info("✅ Hosting management migrated to cPanel API")

            # DNS management migration
            if api_status.get("cloudflare", False):
                migration_results["dns_management"] = True
                logger.info("✅ DNS management migrated to Cloudflare API")

            return migration_results

        except Exception as e:
            logger.error(f"Migration error: {e}")
            return migration_results
